from aiogram import types
from aiogram.fsm.context import FSMContext
from geopy.distance import geodesic

from handlers.contest import contest_router


@contest_router.message(types.ContentType.LOCATION)
async def check_user_location(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–∞–¥–∏—É—Å–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –∑–æ–Ω—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞.
    """
    user_location = message.location
    user_coords = (user_location.latitude, user_location.longitude)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏–∑ –±–∞–∑—ã –∏–ª–∏ FSM
    contest_location = await state.get_data()
    contest_coords = (contest_location["latitude"], contest_location["longitude"])
    radius_km = contest_location.get("radius_km", 2)  # –†–∞–¥–∏—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –∫–º

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
    distance_km = geodesic(user_coords, contest_coords).km

    if distance_km <= radius_km:
        await message.answer(
            f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö {radius_km} –∫–º –æ—Ç –º–µ—Å—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞! üéâ"
        )
    else:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ {radius_km} –∫–º –æ—Ç –º–µ—Å—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. "
            f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_km:.2f} –∫–º."
        )
