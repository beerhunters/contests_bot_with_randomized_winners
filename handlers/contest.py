import html
import json

from aiogram import Router, F
from aiogram.enums import ContentType, ChatMemberStatus, ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from fluent.runtime import FluentLocalization

from datetime import datetime, timedelta

from tools.tools import send_localized_message, get_current_datetime
import keyboards.keyboards as kb
import keyboards.calendar_keyboard.custom_calendar as cl

contest_router = Router()


class ContestState(StatesGroup):
    contest_channel = State()
    contest_text = State()
    contest_file = State()
    contest_winners_count = State()
    contest_post_date = State()
    contest_post_time = State()
    contest_end_date = State()
    contest_end_time = State()
    contest_location = State()
    contest_required_channels = State()
    contest_prizes = State()
    contest_confirmation = State()
    contest_cancel_confirmation = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç
@contest_router.message(F.text.in_({"üéÅ –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å", "üéÅ Create giveaway"}))
async def start_create(message: Message, state: FSMContext, l10n: FluentLocalization):
    await send_localized_message(
        message, l10n, "contest_id", reply_markup=await kb.get_chat_id(l10n)
    )
    await state.set_state(ContestState.contest_channel)


# @contest_router.message(F.chat_shared, ContestState.contest_channel)
# async def add_channel(message: Message, state: FSMContext, l10n: FluentLocalization):
#     contest_channel = message.text.strip()
#
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
#     if contest_channel.startswith("@"):
#         chat_id = contest_channel  # –ü—É–±–ª–∏—á–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º
#     elif contest_channel.lstrip("-").isdigit():
#         chat_id = int(contest_channel)  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
#     else:
#         await send_localized_message(message, l10n, "error_invalid_channel")
#         return
#
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ
#         chat_member = await message.bot.get_chat_member(
#             chat_id=chat_id, user_id=message.bot.id
#         )
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#         if chat_member.status not in [
#             ChatMemberStatus.ADMINISTRATOR,
#             ChatMemberStatus.CREATOR,
#         ]:
#             await send_localized_message(message, l10n, "error_bot_not_admin")
#             return
#     except Exception as e:
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
#         if "chat not found" in str(e).lower():
#             await send_localized_message(message, l10n, "error_invalid_channel")
#         elif "access denied" in str(e).lower():
#             await send_localized_message(message, l10n, "error_bot_not_in_chat")
#         else:
#             await send_localized_message(message, l10n, "error_unexpected")
#         return
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
#     await state.update_data(contest_channel=contest_channel)
#     await send_localized_message(message, l10n, "contest_text")
#     await state.set_state(ContestState.contest_text)


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ–ø–∏—Å–∞–Ω–∏–µ
@contest_router.message(F.chat_shared, ContestState.contest_channel)
async def add_channel(message: Message, state: FSMContext, l10n: FluentLocalization):
    chat_id = int(message.chat_shared.chat_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ
        chat_member = await message.bot.get_chat_member(
            chat_id=chat_id, user_id=message.bot.id
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if chat_member.status not in [
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR,
        ]:
            await send_localized_message(
                message,
                l10n,
                "error_bot_not_admin",
                reply_markup=await kb.get_chat_id(l10n),
            )
            return
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if "chat not found" in str(e).lower():
            await send_localized_message(
                message,
                l10n,
                "error_invalid_channel",
                reply_markup=await kb.get_chat_id(l10n),
            )
        elif "access denied" in str(e).lower():
            await send_localized_message(
                message,
                l10n,
                "error_bot_not_in_chat",
                reply_markup=await kb.get_chat_id(l10n),
            )
        else:
            await send_localized_message(
                message,
                l10n,
                "error_unexpected",
                reply_markup=await kb.get_chat_id(l10n),
            )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.update_data(contest_channel=chat_id)

    data = await state.get_data()
    required_channels = data.get("required_channels", [])
    required_channels.append(str(chat_id))
    await state.update_data(required_channels=required_channels)

    await send_localized_message(message, l10n, "contest_data_saved")
    await send_localized_message(message, l10n, "contest_text")
    await state.set_state(ContestState.contest_text)


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ñ–∞–π–ª
@contest_router.message(ContestState.contest_text)
async def add_description(
    message: Message, state: FSMContext, l10n: FluentLocalization
):
    contest_text = message.text
    await state.update_data(contest_text=contest_text)
    await send_localized_message(message, l10n, "contest_data_saved")
    await send_localized_message(message, l10n, "contest_file")
    await state.set_state(ContestState.contest_file)


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@contest_router.message(ContestState.contest_file)
async def add_file(message: Message, state: FSMContext, l10n: FluentLocalization):
    if message.content_type == ContentType.PHOTO:
        file_id = message.photo[-1].file_id
        file_type = "photo"
        await state.update_data(file_id=file_id, file_type=file_type)
    elif message.content_type == ContentType.VIDEO:
        file_id = message.video.file_id
        file_type = "video"
        await state.update_data(file_id=file_id, file_type=file_type)
    elif message.content_type == ContentType.STICKER:
        file_id = message.sticker.file_id
        file_type = "sticker"
        await state.update_data(file_id=file_id, file_type=file_type)
    elif message.content_type == ContentType.ANIMATION:
        file_id = message.animation.file_id
        file_type = "gif"
        await state.update_data(file_id=file_id, file_type=file_type)
    else:
        file_id = "unknown"
        file_type = "unknown"
        await state.update_data(file_id=file_id, file_type=file_type)
    if file_id and file_type != "unknown":
        await send_localized_message(message, l10n, "contest_data_saved")
    await send_localized_message(message, l10n, "contest_winners_count")
    await state.set_state(ContestState.contest_winners_count)


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
@contest_router.message(ContestState.contest_winners_count)
async def add_winners_count(
    message: Message, state: FSMContext, l10n: FluentLocalization
):
    try:
        winners_count = int(message.text)
        await state.update_data(winners_count=winners_count)
        await send_localized_message(message, l10n, "contest_data_saved")
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        await send_localized_message(
            message,
            l10n,
            "contest_date_clarification",
            reply_markup=await kb.get_publish_keyboard(l10n),
        )
        await state.set_state(ContestState.contest_post_date)
    except ValueError:
        await send_localized_message(message, l10n, "invalid_contest_winners_count")


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å6 –¥–∞–ª–µ–µ —É—Ç–æ—á–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
@contest_router.callback_query(F.data == "publish_now", ContestState.contest_post_date)
async def add_post_date(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "%d.%m.%Y %H:%M"
    post_date = datetime.now().strftime("%d.%m.%Y")
    post_time = datetime.now().strftime("%H:%M")
    await state.update_data(post_date=post_date, post_time=post_time, post="now")
    await send_localized_message(callback, l10n, "contest_data_saved", show_alert=True)
    calendar = cl.CustomCalendar()
    await send_localized_message(
        callback,
        l10n,
        "get_end_date",
        reply_markup=await calendar.generate_calendar(
            datetime.now().year,
            datetime.now().month,
            l10n=l10n,
        ),
    )
    await state.set_state(ContestState.contest_end_date)


# –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å—Ç –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
@contest_router.callback_query(
    F.data == "schedule_post", ContestState.contest_post_date
)
async def add_post_date(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await state.update_data(post="schedule")
    calendar = cl.CustomCalendar()
    await callback.message.edit_text(
        l10n.format_value("get_post_date"),
        reply_markup=await calendar.generate_calendar(
            datetime.now().year,
            datetime.now().month,
            l10n=l10n,
        ),
    )


@contest_router.callback_query(
    F.data.startswith("calendar:"), ContestState.contest_post_date
)
async def add_post_date(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    calendar = cl.CustomCalendar()
    selected_date = await calendar.handle_callback(callback, l10n=l10n)

    if selected_date:
        today = datetime.today().date()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π
        if selected_date.date() >= today:
            await state.update_data(post_date=selected_date.strftime("%d.%m.%Y"))
            await send_localized_message(
                callback, l10n, "contest_data_saved", show_alert=True
            )
            await callback.answer()
            await send_localized_message(callback, l10n, "get_post_time")
            await state.set_state(ContestState.contest_post_time)
        else:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await callback.answer(
                l10n.format_value("error_date_in_past"), show_alert=True
            )


@contest_router.message(ContestState.contest_post_time)
async def add_post_time(message: Message, state: FSMContext, l10n: FluentLocalization):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now()

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        post_time = datetime.strptime(message.text, "%H:%M").time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ
        if post_time > now.time():
            await state.update_data(post_time=message.text)
            await send_localized_message(message, l10n, "contest_data_saved")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            calendar = cl.CustomCalendar()
            await send_localized_message(
                message,
                l10n,
                "get_end_date",
                reply_markup=await calendar.generate_calendar(
                    now.year,
                    now.month,
                    l10n=l10n,
                ),
            )
            await state.set_state(ContestState.contest_end_date)
        else:
            # –í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            await send_localized_message(message, l10n, "error_time_in_past")
    except ValueError:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        await send_localized_message(message, l10n, "error_invalid_time_format")


@contest_router.callback_query(
    F.data.startswith("calendar:"), ContestState.contest_end_date
)
async def add_end_date(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    calendar = cl.CustomCalendar()
    selected_date = await calendar.handle_callback(callback, l10n=l10n)

    if selected_date:
        data = await state.get_data()
        post_date = data["post_date"]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º post_date –≤ –æ–±—ä–µ–∫—Ç datetime
        post_date_dt = datetime.strptime(post_date, "%d.%m.%Y")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ selected_date –±–æ–ª—å—à–µ post_date
        if selected_date >= post_date_dt:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞
            await state.update_data(end_date=selected_date.strftime("%d.%m.%Y"))
            await send_localized_message(
                callback, l10n, "contest_data_saved", show_alert=True
            )
            await callback.answer()
            await send_localized_message(callback, l10n, "get_end_time")
            await state.set_state(ContestState.contest_end_time)
        else:
            # –ï—Å–ª–∏ selected_date –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ post_date, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await callback.answer(
                l10n.format_value("invalid_end_date"), show_alert=True
            )


@contest_router.message(ContestState.contest_end_time)
async def add_end_time(message: Message, state: FSMContext, l10n: FluentLocalization):
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        # print(f"Raw input: {message.text}")
        end_time = datetime.strptime(message.text.strip(), "%H:%M").time()
        # print(f"Parsed end_time: {end_time}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ `"%d.%m.%Y"` –∏ `"%H:%M"`
        post_time = datetime.strptime(data["post_time"], "%H:%M").time()
        post_date = datetime.strptime(data["post_date"], "%d.%m.%Y").date()
        end_date = datetime.strptime(data["end_date"], "%d.%m.%Y").date()
        # print(f"Post time: {post_time}, Post date: {post_date}, End date: {end_date}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞—Ç
        if post_date == end_date:
            post_datetime = datetime.combine(post_date, post_time)
            end_datetime = datetime.combine(end_date, end_time)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            if end_datetime - post_datetime < timedelta(minutes=10):
                await send_localized_message(message, l10n, "error_time_too_close")
                return

        elif post_date > end_date:
            await send_localized_message(message, l10n, "error_invalid_date_order")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        await state.update_data(end_time=message.text)
        await send_localized_message(message, l10n, "contest_data_saved")
        await send_localized_message(
            message,
            l10n,
            "contest_geo_check_required",
            reply_markup=await kb.geo_check_required(l10n),
        )
        await state.set_state(ContestState.contest_location)

    except ValueError as e:
        # –û—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–∫–∏
        # print(f"ValueError occurred: {e}")
        await send_localized_message(message, l10n, "error_invalid_time_format")


@contest_router.callback_query(F.data == "geo_yes", ContestState.contest_location)
async def add_location(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await send_localized_message(
        callback,
        l10n,
        "contest_location",
        reply_markup=await kb.request_location_keyboard(l10n),
    )
    await state.set_state(ContestState.contest_location)


@contest_router.message(
    F.content_type.in_({ContentType.TEXT, ContentType.LOCATION})
    and ContestState.contest_location
)
async def add_location(message: Message, state: FSMContext, l10n: FluentLocalization):
    try:
        if message.content_type == ContentType.LOCATION:
            location = message.location
            if not location:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                await send_localized_message(message, l10n, "error_no_location")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã
            latitude, longitude = location.latitude, location.longitude
            if not (-90 <= latitude <= 90 and -180 <= longitude <= 180):
                await send_localized_message(message, l10n, "error_invalid_location")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.update_data(latitude=latitude, longitude=longitude)

            print(
                f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
                f"–®–∏—Ä–æ—Ç–∞: {latitude}\n–î–æ–ª–≥–æ—Ç–∞: {longitude}",
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞—Ü–∏–∏
            await send_localized_message(message, l10n, "error_location_required")
            return

        # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        await send_localized_message(message, l10n, "contest_data_saved")
        await send_localized_message(message, l10n, "contest_prizes")
        await state.set_state(ContestState.contest_prizes)

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        await send_localized_message(message, l10n, "error_processing_location")


@contest_router.callback_query(F.data == "geo_no", ContestState.contest_location)
async def no_add_location(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await send_localized_message(callback, l10n, "contest_data_saved")
    await send_localized_message(callback, l10n, "contest_prizes")
    await state.set_state(ContestState.contest_prizes)


@contest_router.message(ContestState.contest_prizes)
async def add_prizes(message: Message, state: FSMContext, l10n: FluentLocalization):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        prizes_text = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not prizes_text:
            await send_localized_message(message, l10n, "error_empty_prizes")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤, —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        prizes = [prize.strip() for prize in prizes_text.split(",") if prize.strip()]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if not prizes:
            await send_localized_message(message, l10n, "error_empty_prizes")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.update_data(prizes=prizes)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        await send_localized_message(message, l10n, "contest_data_saved")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await send_localized_message(
            message,
            l10n,
            "contest_required_channels",
            reply_markup=await kb.get_chat_id(l10n, one_time_keyboard=False),
        )
        await state.set_state(ContestState.contest_required_channels)

    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–∑–æ–≤: {e}")
        await send_localized_message(message, l10n, "error_processing_prizes")


@contest_router.message(ContestState.contest_required_channels)
async def add_required_channels(
    message: Message, state: FSMContext, l10n: FluentLocalization
):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç chat_id, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if message.chat_shared:
            # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            required_channels_text = str(message.chat_shared.chat_id)
        elif message.text:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–º—è –∫–∞–Ω–∞–ª–∞)
            required_channels_text = message.text.strip()
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É "/stop", –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        if required_channels_text == "/stop":
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            await send_localized_message(
                message,
                l10n,
                "contest_channels_done",
                reply_markup=await kb.publish_now(l10n),
            )
            await state.set_state(ContestState.contest_confirmation)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        required_channels = data.get("required_channels", [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞
        if required_channels_text in required_channels:
            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await send_localized_message(
                message, l10n, "contest_channel_already_been_added"
            )
            return
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫
            required_channels.append(required_channels_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.update_data(required_channels=required_channels)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–Ω–∞–ª, —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            await send_localized_message(
                message,
                l10n,
                "contest_channel_added",
                reply_markup=await kb.get_chat_id(l10n, one_time_keyboard=False),
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø: {e}")
        await send_localized_message(message, l10n, "error_processing_channels")


@contest_router.callback_query(F.data == "yes", ContestState.contest_confirmation)
async def contest_confirmation(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await callback.answer("üéâ Confirmation!", show_alert=True)
    # –ó–¥–µ—Å—å –Ω–∞–¥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –≤ –ë–î –∏ –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
    data = await state.get_data()
    if data["post_time"] == "now":
        data["post_time"] = await get_current_datetime()
    else:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ datetime
        data["post_time"] = datetime.strptime(
            f"{data['post_date']} {data['post_time']}", "%d.%m.%Y %H:%M"
        )
    data["end_time"] = datetime.strptime(
        f"{data['end_date']} {data['end_time']}", "%d.%m.%Y %H:%M"
    )
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    serialized_data = {
        key: (
            value.strftime("%d.%m.%Y %H:%M") if isinstance(value, datetime) else value
        )
        for key, value in data.items()
    }
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_channel_id = int(data["contest_channel"])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ int
    contest_message = "<b>–î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞:</b>\n"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
    for key, value in serialized_data.items():
        contest_message += (
            f"<b>{key}:</b> {html.escape(str(value))}\n"  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã
        )
    if data["post"] == "now":
        await send_localized_message(callback, l10n, "publish_now_welcome")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç
        await callback.bot.send_message(
            chat_id=contest_channel_id,
            text=contest_message,
            reply_markup=await kb.participation(l10n),
            parse_mode=ParseMode.HTML,
        )
    else:
        post_date = data["post_time"].strftime("%d.%m.%Y")
        post_time = data["post_time"].strftime("%H:%M")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
        text = l10n.format_value(
            "schedule_welcome", {"date": post_date, "time": post_time}
        )
        await callback.message.edit_text(text)

        # –ù—É–∂–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        await callback.bot.send_message(
            chat_id=contest_channel_id,
            text=text,
            parse_mode=ParseMode.HTML,
        )

    await send_localized_message(
        callback, l10n, "welcome_text", reply_markup=await kb.start_menu(l10n)
    )
    await state.clear()


@contest_router.callback_query(F.data == "no", ContestState.contest_confirmation)
async def contest_confirmation(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await send_localized_message(
        callback,
        l10n,
        "contest_cancel_confirmation",
        reply_markup=await kb.publish_now(l10n),
    )
    await state.set_state(ContestState.contest_cancel_confirmation)


@contest_router.callback_query(
    F.data == "yes", ContestState.contest_cancel_confirmation
)
async def contest_confirmation(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await callback.answer("‚òπÔ∏è Okay..", show_alert=True)
    await send_localized_message(
        callback, l10n, "welcome_text", reply_markup=await kb.start_menu(l10n)
    )
    await state.clear()


@contest_router.callback_query(F.data == "no", ContestState.contest_cancel_confirmation)
async def contest_confirmation(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await send_localized_message(
        callback,
        l10n,
        "contest_repeat_confirmation",
        reply_markup=await kb.publish_now(l10n),
    )
    await state.set_state(ContestState.contest_confirmation)
