import json

from aiogram import Router, F
from aiogram.enums import ContentType, ChatMemberStatus
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from fluent.runtime import FluentLocalization

from datetime import datetime

from tools.tools import send_localized_message, get_current_datetime
import keyboards.keyboards as kb
import keyboards.calendar_keyboard.custom_calendar as cl

contest_router = Router()


class ContestState(StatesGroup):
    contest_channel = State()
    contest_text = State()
    contest_file = State()
    contest_winners_count = State()
    contest_post_date = State()
    contest_post_time = State()
    contest_end_date = State()
    contest_end_time = State()
    contest_location = State()
    contest_required_channels = State()
    contest_prizes = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç
@contest_router.message(F.text.in_({"üéÅ –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å", "üéÅ Create giveaway"}))
async def start_create(message: Message, state: FSMContext, l10n: FluentLocalization):
    # await send_localized_message(message, l10n, "contest_channel")
    await send_localized_message(
        message, l10n, "contest_id", reply_markup=await kb.get_chat_id(l10n)
    )
    await state.set_state(ContestState.contest_channel)


# @contest_router.message(F.chat_shared, ContestState.contest_channel)
# async def add_channel(message: Message, state: FSMContext, l10n: FluentLocalization):
#     contest_channel = message.text.strip()
#
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
#     if contest_channel.startswith("@"):
#         chat_id = contest_channel  # –ü—É–±–ª–∏—á–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º
#     elif contest_channel.lstrip("-").isdigit():
#         chat_id = int(contest_channel)  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
#     else:
#         await send_localized_message(message, l10n, "error_invalid_channel")
#         return
#
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ
#         chat_member = await message.bot.get_chat_member(
#             chat_id=chat_id, user_id=message.bot.id
#         )
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#         if chat_member.status not in [
#             ChatMemberStatus.ADMINISTRATOR,
#             ChatMemberStatus.CREATOR,
#         ]:
#             await send_localized_message(message, l10n, "error_bot_not_admin")
#             return
#     except Exception as e:
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
#         if "chat not found" in str(e).lower():
#             await send_localized_message(message, l10n, "error_invalid_channel")
#         elif "access denied" in str(e).lower():
#             await send_localized_message(message, l10n, "error_bot_not_in_chat")
#         else:
#             await send_localized_message(message, l10n, "error_unexpected")
#         return
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
#     await state.update_data(contest_channel=contest_channel)
#     await send_localized_message(message, l10n, "contest_text")
#     await state.set_state(ContestState.contest_text)


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ–ø–∏—Å–∞–Ω–∏–µ
@contest_router.message(F.chat_shared, ContestState.contest_channel)
async def add_channel(message: Message, state: FSMContext, l10n: FluentLocalization):
    chat_id = int(message.chat_shared.chat_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ
        chat_member = await message.bot.get_chat_member(
            chat_id=chat_id, user_id=message.bot.id
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if chat_member.status not in [
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR,
        ]:
            await send_localized_message(
                message,
                l10n,
                "error_bot_not_admin",
                reply_markup=await kb.get_chat_id(l10n),
            )
            return
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if "chat not found" in str(e).lower():
            await send_localized_message(
                message,
                l10n,
                "error_invalid_channel",
                reply_markup=await kb.get_chat_id(l10n),
            )
        elif "access denied" in str(e).lower():
            await send_localized_message(
                message,
                l10n,
                "error_bot_not_in_chat",
                reply_markup=await kb.get_chat_id(l10n),
            )
        else:
            await send_localized_message(
                message,
                l10n,
                "error_unexpected",
                reply_markup=await kb.get_chat_id(l10n),
            )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.update_data(contest_channel=chat_id)
    await send_localized_message(message, l10n, "contest_chat_saved")
    await send_localized_message(message, l10n, "contest_text")
    await state.set_state(ContestState.contest_text)


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —Ñ–∞–π–ª
@contest_router.message(ContestState.contest_text)
async def add_description(
    message: Message, state: FSMContext, l10n: FluentLocalization
):
    contest_text = message.text
    await state.update_data(contest_text=contest_text)
    await send_localized_message(message, l10n, "contest_description_saved")
    await send_localized_message(message, l10n, "contest_file")
    await state.set_state(ContestState.contest_file)


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@contest_router.message(ContestState.contest_file)
async def add_file(message: Message, state: FSMContext, l10n: FluentLocalization):
    if message.content_type == ContentType.PHOTO:
        file_id = message.photo[-1].file_id
        file_type = "photo"
        await state.update_data(file_id=file_id, file_type=file_type)
    elif message.content_type == ContentType.VIDEO:
        file_id = message.video.file_id
        file_type = "video"
        await state.update_data(file_id=file_id, file_type=file_type)
    elif message.content_type == ContentType.STICKER:
        file_id = message.sticker.file_id
        file_type = "sticker"
        await state.update_data(file_id=file_id, file_type=file_type)
    elif message.content_type == ContentType.ANIMATION:
        file_id = message.animation.file_id
        file_type = "gif"
        await state.update_data(file_id=file_id, file_type=file_type)
    else:
        file_id = "unknown"
        file_type = "unknown"
        await state.update_data(file_id=file_id, file_type=file_type)
    if file_id and file_type != "unknown":
        await send_localized_message(message, l10n, "contest_attachment_saved")
    await send_localized_message(message, l10n, "contest_winners_count")
    await state.set_state(ContestState.contest_winners_count)


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
@contest_router.message(ContestState.contest_winners_count)
async def add_winners_count(
    message: Message, state: FSMContext, l10n: FluentLocalization
):
    try:
        winners_count = int(message.text)
        await state.update_data(winners_count=winners_count)
        await send_localized_message(message, l10n, "contest_winners_count_saved")
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        await send_localized_message(
            message,
            l10n,
            "contest_date_clarification",
            reply_markup=await kb.get_publish_keyboard(l10n),
        )
        await state.set_state(ContestState.contest_post_date)
    except ValueError:
        await send_localized_message(message, l10n, "invalid_contest_winners_count")


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å6 –¥–∞–ª–µ–µ —É—Ç–æ—á–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
@contest_router.callback_query(F.data == "publish_now", ContestState.contest_post_date)
async def add_post_date(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    await state.update_data(post_date="now")
    # post_time = post_date + post_time
    # –ø–æ –∫–æ–ª-–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    calendar = cl.CustomCalendar()
    await send_localized_message(
        callback,
        l10n,
        "get_end_date",
        reply_markup=await calendar.generate_calendar(
            datetime.now().year,
            datetime.now().month,
            l10n=l10n,
        ),
    )
    await state.set_state(ContestState.contest_end_date)


# –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å—Ç –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
@contest_router.callback_query(
    F.data == "schedule_post", ContestState.contest_post_date
)
async def add_post_date(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    calendar = cl.CustomCalendar()
    await callback.message.edit_text(
        l10n.format_value("get_post_date"),
        reply_markup=await calendar.generate_calendar(
            datetime.now().year,
            datetime.now().month,
            l10n=l10n,
        ),
    )


@contest_router.callback_query(
    F.data.startswith("calendar:"), ContestState.contest_post_date
)
async def add_post_date(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    calendar = cl.CustomCalendar()
    selected_date = await calendar.handle_callback(callback, l10n=l10n)

    if selected_date:
        await state.update_data(post_date=selected_date.strftime("%d.%m.%Y"))
        # await callback.message.edit_text("B—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:\n")
        await callback.answer()
        await send_localized_message(callback, l10n, "get_post_time")
        await state.set_state(ContestState.contest_post_time)


@contest_router.message(ContestState.contest_post_time)
async def add_post_time(message: Message, state: FSMContext, l10n: FluentLocalization):
    post_time = message.text
    # –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    await state.update_data(post_time=post_time)
    # post_time = post_date + post_time
    # –ø–æ –∫–æ–ª-–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    # await send_localized_message(message, l10n, "get_end_date")
    calendar = cl.CustomCalendar()
    await send_localized_message(
        message,
        l10n,
        "get_end_date",
        reply_markup=await calendar.generate_calendar(
            datetime.now().year,
            datetime.now().month,
            l10n=l10n,
        ),
    )
    await state.set_state(ContestState.contest_end_date)


@contest_router.callback_query(
    F.data.startswith("calendar:"), ContestState.contest_end_date
)
async def add_end_date(
    callback: CallbackQuery, state: FSMContext, l10n: FluentLocalization
):
    calendar = cl.CustomCalendar()
    selected_date = await calendar.handle_callback(callback, l10n=l10n)
    # if selected_date:
    #     await state.update_data(end_date=selected_date.strftime("%d.%m.%Y"))
    #     # await callback.message.edit_text("B—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:\n")
    #     await callback.answer()
    #     await send_localized_message(callback, l10n, "get_end_time")
    #     await state.set_state(ContestState.contest_end_time)
    if selected_date:
        data = await state.get_data()
        post_date = data["post_date"]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º post_date –≤ –æ–±—ä–µ–∫—Ç datetime
        post_date_dt = datetime.strptime(post_date, "%d.%m.%Y")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ selected_date –±–æ–ª—å—à–µ post_date
        if selected_date >= post_date_dt:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞
            await state.update_data(end_date=selected_date.strftime("%d.%m.%Y"))
            await callback.answer()
            await send_localized_message(callback, l10n, "get_end_time")
            await state.set_state(ContestState.contest_end_time)
        else:
            # –ï—Å–ª–∏ selected_date –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ post_date, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await callback.answer(
                l10n.format_value("invalid_end_date"), show_alert=True
            )


# # –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å—Ç –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
# @contest_router.callback_query(
#     F.data == "schedule_post", ContestState.contest_post_time
# )
# async def add_post_time(message: Message, state: FSMContext, l10n: FluentLocalization):
#     post_time = message.text
#     await state.update_data(post_time=post_time)
#     # –ø–æ –∫–æ–ª-–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
#     await send_localized_message(message, l10n, "contest_end_time")
#     await state.set_state(ContestState.contest_end_time)


@contest_router.message(ContestState.contest_end_time)
async def add_end_time(message: Message, state: FSMContext, l10n: FluentLocalization):
    end_time = message.text
    # –Ω—É–∂–Ω–∞ –¥–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    await state.update_data(end_time=end_time)
    # post_time = post_date + post_time
    # –≤–æ–ø—Ä–æ—Å –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ì–ï–û
    await send_localized_message(
        message,
        l10n,
        "contest_location",
        reply_markup=await kb.request_location_keyboard(l10n),
    )
    await state.set_state(ContestState.contest_location)


@contest_router.message(
    F.—Åontent_types.in_({ContentType.TEXT, ContentType.LOCATION})
    and ContestState.contest_location
)
async def add_location(message: Message, state: FSMContext, l10n: FluentLocalization):
    if message.content_type == ContentType.LOCATION:
        location = message.location
        latitude, longitude = location.latitude, location.longitude

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.update_data(latitude=latitude, longitude=longitude)

        await message.answer(
            f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
            f"–®–∏—Ä–æ—Ç–∞: {latitude}\n–î–æ–ª–≥–æ—Ç–∞: {longitude}",
        )
    else:
        pass
    await send_localized_message(message, l10n, "contest_prizes")
    await state.set_state(ContestState.contest_prizes)


@contest_router.message(ContestState.contest_prizes)
async def add_prizes(message: Message, state: FSMContext, l10n: FluentLocalization):
    prizes = message.text
    await state.update_data(prizes=prizes)
    await send_localized_message(message, l10n, "contest_required_channels")
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–æ–¥–ø–∏—Å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    await state.set_state(ContestState.contest_required_channels)


@contest_router.message(ContestState.contest_required_channels)
async def add_required_channels(
    message: Message, state: FSMContext, l10n: FluentLocalization
):
    required_channels = message.text
    await state.update_data(required_channels=required_channels)
    data = await state.get_data()
    if data["post_time"] == "now":
        data["post_time"] = await get_current_datetime()
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è "—Å–µ–π—á–∞—Å" –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
    # –í—ã–≤–æ–¥–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    print(json.dumps(data, indent=4, ensure_ascii=False))

    # –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    # –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å?
    # await send_localized_message(message, l10n, "contest_prizes")
    # await state.set_state(ContestState.contest_prizes)


@contest_router.message(F.text.in_({"üéâ –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", "üéâ My giveaways"}))
async def handle_my_contests(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/my_contests".
    """
    await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
